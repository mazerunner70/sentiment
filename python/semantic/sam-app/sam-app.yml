AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyAccessFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ["sts:AssumeRole"]
            Principal: 
              Service: "lambda.amazonaws.com"
              
  SemanticLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build-semantic/
      Events:
        SemanticLambdaEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: SemanticBucket
            Events: s3:ObjectCreated:*
      Handler: semantic-main.lambda_handler
      Policies: AWSLambdaExecute
      Runtime: python3.6
      Environment:
        Variables: 
          NLTK_DATA: ./nltk_data
      Timeout: 60
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
#      DefinitionUri: access-swagger.yaml 
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Sub s3://wils-staging/access-swagger.yaml

  SemanticBucket:
    Type: AWS::S3::Bucket
  MyAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: access-main.lambda_handler
      Runtime: python3.6
      CodeUri: build-access/
      Role: !GetAtt MyAccessFunctionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !GetAtt SemanticBucket.Arn
      Events:
        ViewApi:
          Type: Api
          Properties:
            Path: /reports
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        GetApi:
          Type: Api
          Properties:
            Path: /report
            Method: GET
            RestApiId: !Ref ApiGatewayApi


Transform: AWS::Serverless-2016-10-31
