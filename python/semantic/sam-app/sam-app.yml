AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  CognitoUserPoolName:
    Type: String
    Default: MyUserPool

  CognitoUserPoolClientName:
    Type: String
    Default: MyUserPoolClient

Resources:
  MyAccessFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ["sts:AssumeRole"]
            Principal: 
              Service: "lambda.amazonaws.com"
  SemanticLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ["sts:AssumeRole"]
            Principal: 
              Service: "lambda.amazonaws.com"
              
#  SemanticLambda:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: build-semantic/
#      Events:
#        SemanticLambdaEvent:
#          Type: S3
#          Properties:
#            Bucket:
#              Ref: SemanticBucket
#            Events: s3:ObjectCreated:*
#      Handler: semantic-main.lambda_handler
#      Role: !GetAtt SemanticLambdaRole.Arn
#      Policies: AWSLambdaExecute
#      Runtime: python3.6
#      Environment:
#        Variables: 
#          NLTK_DATA: ./nltk_data
#      Timeout: 60
  ComprehendLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build-comprehend/
      Events:
        ComprehendLambdaEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: SemanticBucket
            Events: s3:ObjectCreated:*
      Handler: comprehend-main.lambda_handler
      Role: !GetAtt SemanticLambdaRole.Arn
#      Policies: AWSLambdaExecute
      Runtime: python3.6
      Environment:
        Variables: 
          NLTK_DATA: ./nltk_data
      Timeout: 60
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Sub s3://wils-staging-1/access-swagger.yaml

  SemanticBucket:
    Type: AWS::S3::Bucket

  MyAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: access-main.lambda_handler
      Timeout: 10
      Runtime: python3.6
      CodeUri: build-access/
      Role: !GetAtt MyAccessFunctionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !GetAtt SemanticBucket.Arn
          COGNITO_USER_POOL_CLIENT_ID: !Ref MyCognitoUserPoolClient
      Events:
        ViewApi:
          Type: Api
          Properties:
            Path: /reports
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        GetApi:
          Type: Api
          Properties:
            Path: /report
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true}
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Timeout: 3

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyCognitoUserPool}'

Outputs:
  UploadBucket:
    Description: 'S3 bucket to upload records to'
    Value: !Ref SemanticBucket

  ApiId:
    Description: 'API_ID'
    Value: !Ref ApiGatewayApi

  ApiUrl:
    Description: 'API endpoint URL for Prod Environment'
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

  CognitoUserPoolId:
    Description: 'Cognito User Pool Id'
    Value: !Ref MyCognitoUserPool

  CognitoUserPoolClientId:
    Description: 'Cognito User Pool Client Id'
    Value: !Ref MyCognitoUserPoolClient

# Cognito settings refrence:
# https://github.com/awslabs/serverless-application-model/tree/master/examples/2016-10-31/api_cognito_auth
